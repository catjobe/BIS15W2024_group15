---
title: "test"
output: html_document
date: "2024-03-12"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
library(janitor)
library(naniar)
library(ggmap)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(RColorBrewer)
```

```{r}
ui <- dashboardPage(
  dashboardHeader(title = "Dogs and Markers"),
  dashboardSidebar(disable = T),
  dashboardBody(
          
          fluidRow(
  box(title = "Plot Options", width = 3,
  selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
  selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
  ), #closes the first box
  box(title = "Dog Size and Markers by Country of Origin", width = 8,
  plotOutput("plot", width = "500px", height = "400px")
  ) #closes the second box
  ) #closes the row
  ) #closes the dashboard body
)
server <- function(input, output, session) {
        
        session$onSessionEnded(stopApp)
        
        output$plot <- renderPlot ({
          
        new_dogs_joined %>%
  filter(sex != "NA") %>% 
  filter(marker_alleles_data != "NA") %>% 
  filter(country_of_origin != "NA") %>% 
  filter(chr_location == input$x) %>% 
  filter(sex == input$y) %>%
  ggplot(aes(x = country_of_origin, fill = country_of_origin)) +
  geom_bar() +
  coord_flip() +
  facet_grid(marker_alleles_data~.) +
  scale_fill_manual(values = spectral) +
  theme_minimal() +
  labs(title = "Variant by Country of Origin", 
       x = "Country of Origin",
       fill = "Variant") +
  theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        
})
        
}

shinyApp(ui, server)
```


```{r}
ui <- dashboardPage(
  dashboardHeader(title = "GWAS Dogs"),
  dashboardSidebar(
          sidebarMenu(
                menuItem("Markers - Dog Height and Weight", tabName = "Markers and Dog Size", icon = icon("pencil")),
) #closing sidebar menu
), #closing dashboard sidebar
  dashboardBody(
          tabItems(
          tabItem(tabName = "Markers and Dog Size",
          fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
  ), #closes the first box
                box(title = "Dog Height and Markers", width = 8,
                plotOutput("plot1")
  ) #closes the second box
  ) #closes the first fluid row
  ) #closes the tab items
  ) #closes the dashboard body
  ) #closes the ui
server <- function(input, output, session) {
        session$onSessionEnded(stopApp)
        output$plot1 <- renderPlot({ 
                dog_gwas_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = height_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                        x = "Height Category",
                        y = "Count",
                        fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
}
 shinyApp(ui, server)               
```


```{r}
ui <- dashboardPage(
  dashboardHeader(title = "GWAS Dogs"),
  dashboardSidebar(sidebarMenu(
                menuItem("Markers", tabName = "Markers and Dog Size"))
  dashboardBody(
          tabItems(
          tabItem(tabName = "Markers and Dog Size",
                fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
  ), #closes the first box
                box(title = "Dog Height and Markers", width = 8,
                plotOutput("plot1")
  ) #closes the second box
),
        fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
  ), #closes the box
                box(title = "Dog Weight and Markers", width = 8,
                plotOutput("plot2")
  ) #closes the second box
  ) #closes the fluid row
  ) #closes the dashboard body
  ) #closes the tab item
  ) #closes the ui
  )
server <- function(input, output, session) {
        session$onSessionEnded(stopApp)
        output$plot1 <- renderPlot({ 
                dog_gwas_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = height_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                        x = "Height Category",
                        y = "Count",
                        fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
         output$plot2 <- renderPlot({ 
                dog_gwas_mass_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = mass_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                x = "Mass Category",
                y = "Count",
                fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
}
shinyApp(ui, server)               
```


```{r}
dog_gwas_sf <- dog_gwas %>%
        filter(longitude != "NA" | latitude != "NA") %>%
        filter(longitude != "NA" | latitude != "NA") %>%
        filter(longitude != "#N/A" | latitude != "#N/A") %>%
        st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
```

```{r}
dog_gwas_grouped_sf <- dog_gwas %>% 
        filter(longitude != "NA" | latitude != "NA") %>%
        filter(longitude != "NA" | latitude != "NA") %>%
        filter(longitude != "#N/A" | latitude != "#N/A") %>%
        mutate(height_category = case_when(height_cm <= 20.0 ~ "small",
                                           height_cm > 20.0 & height_cm < 73.0 ~ "medium",
                                           height_cm >= 70.0 ~ "large")) %>%
        filter(height_category != "NA") %>%
        st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
```

```{r}
dog_gwas_grouped_sf %>% 
        filter(height_category == "small")
```


```{r}
mapview(dog_gwas_grouped_sf, zcol = "height_category", legend = TRUE, map.types = "CartoDB.Positron") 
```

```{r}
ui <- dashboardPage(skin = "yellow",
  dashboardHeader(title = "Dogs Genetics - Size"),
  dashboardSidebar(disable = T),
  dashboardBody(
          fluidPage(
        theme = shinytheme("sandstone"),
        tabsetPanel(
        tabPanel("Markers",
                fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
                ), #closes the first box
                box(title = "Dog Height and Markers", width = 8,
                plotOutput("plot1")
                ) #closes the second box
                ), #closes the first fluid row
                fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
                ), #closes the box
                box(title = "Dog Weight and Markers", width = 8,
                plotOutput("plot2")
                ) #closes the box
                ) #closes the fluid row
                ),  #closes the tab panel item
        tabPanel("IGF1 Genotype",
             fluidRow(
                box(title = "Mean Mass by IGF1 Genotype", width = 10,
                    plotOutput("plot3")
                    ), #closes the box
                box(title = "Table of Mean Mass by IGF1 Genotype", width = 10,
                    tableOutput("table1")
                ), #closes the box
              ), #closes the fluidrow
              fluidRow(
                box(title = "Mean Height by IGF1 Genotype", width = 10,
                    plotOutput("plot4")
                ), #closes the box
                box(title = "Table of Mean Height by IGF1 Genotype", width = 10,
                    tableOutput("table2")
                ) #closes the box
                ) #closes the fluid row
        ), #closes the tab panel item
             tabPanel("Mean Mass and Heights by Country of Origin",
                fluidRow(
                box(title = "Mean Weight by Country of Origin", width = 10,
                    plotOutput("plot5")
                ) #closes the box
                ), #closes the fluid row
                fluidRow(
                box(title = "Mean Height by Country of Origin", width = 10,
                    plotOutput("plot6")
                ) #closes the box
                ) #closes the fluid row
  ) #closes the tab panel item
  ) #closes the tabset panel
) #closes fluid page
) #closes the dashboard body
) #closes the ui
server <- function(input, output, session) {
        output$plot1 <- renderPlot({ 
                dog_gwas_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = height_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                        x = "Height Category",
                        y = "Count",
                        fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
        output$plot2 <- renderPlot({ 
                dog_gwas_mass_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = mass_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                x = "Mass Category",
                y = "Count",
                fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
        output$table1 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_body_mass = mean(body_mass_kg, na.rm=T), mean_height = mean(height_cm, na.rm=T))
        }) #closes the render table
        output$table1 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_body_mass = mean(body_mass_kg, na.rm=T)) %>% 
                rename("Mean Mass (kg)" = mean_body_mass, "IGF1 Genotype" = igf1_as_genotype)
        }) #closes the render table
        output$plot3 <- renderPlot({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(meanbodymass = mean(body_mass_kg, na.rm=T)) %>%
                ggplot(aes(x = igf1_as_genotype, y = meanbodymass, fill = igf1_as_genotype)) +
                geom_col() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Mean Mass by IGF1 Genotype", 
                        x = "IGF1 Genotype", 
                        y= "Mean Body Mass (kg)",
                        fill = "IGF1 Genotype") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
        output$table2 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_height = mean(height_cm, na.rm=T)) %>% 
                rename("Mean Height (cm)" = mean_height, "IGF1 Genotype" = igf1_as_genotype)
        }) #closes the render table
        output$plot4 <- renderPlot({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(meanheight = mean(height_cm, na.rm=T)) %>%
                ggplot(aes(x = igf1_as_genotype, y = meanheight, fill = igf1_as_genotype)) +
                geom_col() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Mean Height by IGF1 Genotype", 
                        x = "IGF1 Genotype", 
                        y = "Mean Height(cm)",
                        fill = "IGF1 Genotype")+
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
        output$plot5 <- renderPlot({
                new_dogs_joined %>% 
                        group_by(country_of_origin) %>%
                        summarize(mean_mass = mean(body_mass_kg, na.rm = T)) %>%
                        filter(country_of_origin != "NA") %>%
                        ggplot(aes(x = country_of_origin, y = mean_mass, fill = country_of_origin)) +
                        geom_col() +
                        coord_flip() +
                        scale_fill_manual(values = spectral)  +
                        theme_minimal() +
                        labs(title = "Mean Weight by Country of Origin",
                        x = "Country of Origin",
                        y = "Mean Mass (kg)",
                        fill = "Country of Origin") +
                        theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
        output$plot6 <- renderPlot({
                new_dogs_joined %>% 
                        group_by(country_of_origin) %>%
                        summarize(mean_height = mean(height_cm, na.rm = T)) %>%
                        filter(country_of_origin != "NA") %>%
                        ggplot(aes(x = country_of_origin, y = mean_height, fill = country_of_origin)) +
                        geom_col() +
                        coord_flip() +
                        scale_fill_manual(values = spectral)  +
                        theme_minimal() +
                        labs(title = "Mean Height by Country of Origin",
                        x = "Country of Origin",
                        y = "Mean Height (cm)",
                        fill = "Country of Origin") +
                        theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
session$onSessionEnded(stopApp)
}
 shinyApp(ui, server)               
```

```{r}
setwd("/Users/catrinelberevoescu/Desktop/potential_data_sets")
dog_breeds <- read_csv("dog_breeds.csv")
```

```{r}
dog_breeds <- dog_breeds %>% clean_names()
```

```{r}
dog_breeds <- dog_breeds %>% 
  mutate(across(where(is.character), str_remove_all, pattern = fixed(" ")))
```

```{r}
dogs_joined <- full_join(dog_gwas, dog_breeds, by="breed")
```

```{r}
new_dogs_joined <- dogs_joined %>% 
  mutate(height_category = case_when(height_cm <= 20.0 ~ "small",
                                           height_cm > 20.0 & height_cm < 70.0 ~ "medium",
                                           height_cm >= 70.0 ~ "large")) %>% 
  pivot_longer(cols = starts_with("chr15"),
                     names_to = "chr_location",
                     values_to = "marker_alleles_data") %>% 
  filter(used_for_gwas == "Yes") %>% 
  select(breed, country_of_origin, body_mass_kg, height_cm, sex, igf1_as_genotype, height_category, chr_location, marker_alleles_data, common_health_problems) %>% 
  write_csv("dogs_joined.csv")
```

```{r}
library("rworldmap")
```

```{r}
n <- joinCountryData2Map(new_dogs_joined, joinCode = "NAME", nameJoinColumn = "country_of_origin")
```

```{r}
mapCountryData(n, nameColumnToPlot = "body_mass_kg", mapTitle = "Dog Breed by Mass and Origin")
```

```{r}
mapCountryData(n, nameColumnToPlot = "height_cm", mapTitle = "Dog Breed by Height and Origin")
```

## Creating a Shiny App with all the Visuals

```{r}
ui <- dashboardPage(skin = "yellow",
  dashboardHeader(title = "GWAS Dogs"),
  dashboardSidebar(disable = T),
  dashboardBody(
          fluidPage(
        theme = shinytheme("sandstone"),
        tabsetPanel(
        tabPanel("Markers",
                fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
                ), #closes the first box
                box(title = "Dog Height and Markers", width = 8,
                plotOutput("plot1")
                ) #closes the second box
                ), #closes the first fluid row
                fluidRow(
                box(title = "Plot Options", width = 3,
                selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr()),
                selectInput("y", "Select Sex", choices = c("M", "F"), selected = "M")
                ), #closes the box
                box(title = "Dog Weight and Markers", width = 8,
                plotOutput("plot2")
                ) #closes the box
                ) #closes the fluid row
                ),  #closes the tab panel item
        tabPanel("IGF1 Genotype",
             fluidRow(
                box(title = "Mean Mass by IGF1 Genotype", width = 10,
                    plotOutput("plot3")
                    ), #closes the box
                box(title = "Table of Mean Mass by IGF1 Genotype", width = 10,
                    tableOutput("table1")
                ), #closes the box
              ), #closes the fluidrow
              fluidRow(
                box(title = "Mean Height by IGF1 Genotype", width = 10,
                    plotOutput("plot4")
                ), #closes the box
                box(title = "Table of Mean Height by IGF1 Genotype", width = 10,
                    tableOutput("table2")
  ) #closes the box
  ) #closes the fluid row
  ) #closes the tab panel item
  ) #closes the tabset panel
) #closes fluid page
) #closes the dashboard body
) #closes the ui
server <- function(input, output, session) {
        output$plot1 <- renderPlot({ 
                dog_gwas_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = height_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                        x = "Height Category",
                        y = "Count",
                        fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
        output$plot2 <- renderPlot({ 
                dog_gwas_mass_pivoted %>%
                filter(sex == input$y) %>%
                filter(chr_location == input$x) %>% 
                ggplot(aes(x = mass_category, fill = marker_alleles_data)) +
                geom_bar() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Largest vs Smallest Dogs",
                x = "Mass Category",
                y = "Count",
                fill = "Marker") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
        }) #closes the render plot
        output$table1 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_body_mass = mean(body_mass_kg, na.rm=T), mean_height = mean(height_cm, na.rm=T))
        }) #closes the render table
        output$table1 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_body_mass = mean(body_mass_kg, na.rm=T)) %>% 
                rename("Mean Mass (kg)" = mean_body_mass, "IGF1 Genotype" = igf1_as_genotype)
        }) #closes the render table
        output$plot3 <- renderPlot({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(meanbodymass = mean(body_mass_kg, na.rm=T)) %>%
                ggplot(aes(x = igf1_as_genotype, y = meanbodymass, fill = igf1_as_genotype)) +
                geom_col() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Mean Mass by IGF1 Genotype", 
                        x = "IGF1 Genotype", 
                        y= "Mean Body Mass (kg)",
                        fill = "IGF1 Genotype") +
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
        output$table2 <- renderTable({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(mean_height = mean(height_cm, na.rm=T)) %>% 
                rename("Mean Height (cm)" = mean_height, "IGF1 Genotype" = igf1_as_genotype)
        }) #closes the render table
        output$plot4 <- renderPlot({
                dog_gwas %>%
                group_by(igf1_as_genotype) %>%
                summarise(meanheight = mean(height_cm, na.rm=T)) %>%
                ggplot(aes(x = igf1_as_genotype, y = meanheight, fill = igf1_as_genotype)) +
                geom_col() +
                scale_fill_brewer(palette = "Spectral") +
                theme_minimal() +
                labs(title = "Mean Height by IGF1 Genotype", 
                        x = "IGF1 Genotype", 
                        y = "Mean Height(cm)",
                        fill = "IGF1 Genotype")+
                theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        }) #closes the render plot
session$onSessionEnded(stopApp)
}
 shinyApp(ui, server)               
```


```{r}
ui <- dashboardPage(
  dashboardHeader(title = "Dogs and Markers"),
  dashboardSidebar(disable = T),
  dashboardBody(
          
          fluidRow(
  box(title = "Plot Options", width = 3,
  selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas_pivoted$chr_location), hr())
  ), #closes the first box
  box(title = "Dog Size and Markers by Country of Origin", width = 8,
  plotOutput("plot", width = "500px", height = "400px")
  ) #closes the second box
  ) #closes the row
  ) #closes the dashboard body
)
server <- function(input, output, session) {
        
        session$onSessionEnded(stopApp)
        
        output$plot <- renderPlot ({
          
        new_dogs_joined %>%
  filter(sex != "NA") %>% 
  filter(height_category != "medium") %>%
  filter(marker_alleles_data != "NA") %>% 
  filter(country_of_origin != "NA") %>% 
  filter(chr_location == input$x) %>% 
  ggplot(aes(x = country_of_origin, fill = marker_alleles_data)) +
  geom_bar() +
  coord_flip() +
  facet_grid(height_category~.) +
  scale_fill_brewer(palette = "Spectral") +
  theme_minimal() +
  labs(title = "Variant by Country of Origin", 
       x = "Country of Origin",
       fill = "Variant") +
  theme(plot.title = element_text(size = rel(1.3), hjust = 0.5))
        
})
        
}

shinyApp(ui, server)
```

```{r}
 ui <- dashboardPage(
  dashboardHeader(title = "Dogs and Markers"),
  dashboardSidebar(disable=T),
  dashboardBody(
    
    fluidRow(
      box(title = "Plot Options", width = 3,
          selectInput("x", "Select Chromosome Position", choices = unique(dog_gwas$chr_location), hr()),
      ), #closes the first box
      box(title = "Dog Size and Markers", width = 8,
          plotOutput("plot", width = "500px", height = "400px")
          
      ) #closes the second box
    ) #closes the row
  ) #closes the dashboard body
 #closes the ui 

server <- function(input, output, session) {
  
  session$onSessionEnded(stopApp)
  
  output$plot <- renderPlot ({
    
    dog_gwas %>%
      mutate(height_category = case_when(height_cm <= 20.0 ~ "small",
                                         height_cm > 20.0 & height_cm < 73.0 ~ "medium",
                                         height_cm >= 70.0 ~ "large")) %>% 
      filter(chr_location == input$x) %>% 
      ggplot(aes(x = height_category, fill = marker_alleles_data)) +
      geom_bar() +
      scale_fill_brewer(palette = "Spectral") +
      theme_minimal() +
      labs(title = "Largest vs Smallest Dogs",
           x = "Height Category",
           y = "Count",
           fill = "Marker") +
      theme(plot.title = element_text(size = rel(1.3), hjust = 0.5), axis.text.x = element_text(angle = 90, hjust = 1))
    
  })
  
}

shinyApp(ui, server)
```

